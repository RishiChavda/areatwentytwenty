IN1007 Programming in Java Coursework
Game implementation

My game (namely “AreaTwentyTwenty”) requires players to use the arrow keys on the computer keyboard to jump up and land on the different platforms to effectively climb up the map structure. At the very top of this structure however is a chest which, once a user has collected all of the green coins, can use to advance to the next level. The player itself is a small ball (CircleShape dynamic body) which uses a smiley face as it’s image mapping the whole body, this is to add a much more fun and entertaining view to the game. The player is controlled by arrow keys by either moving up, left, or right. These controls allow the player’s character to jump up and land on platforms as well as move closer to coins and away from meteors and arrows. I have also implemented multiple fixtures in to my game, for example the arrows have one fixture on the arrowhead and another on the rest of the arrow. This allows me to set the arrowhead to be a DeadlySolidFixture (class I have created which extends SolidFixture). This then allowed me to check whether the player has touched an arrow fixture which was an instance of the DeadlySolidFixture class.

As for the meteors which fall every 5 seconds, I used a timer to call an action every ‘x’ seconds, of which I set to 5 and the action was creating a meteor which is quite large and can block the user’s path up the game structure whilst they are moving. I also utilized the “addImage” method to add a meteor image to this shape to, again, add a much more fun and entertaining view to the game. Once the user has collected all of the coins for that level and they touch the chest at the top, they can advance to the next level. I made the chest a dynamic body so that players can push the chest back down, collect any remaining coins, and then simply advance to the next level without having to navigate up the structure all over again. For the levels however, I created an abstract class of which each level (4 levels in total) extends and each one has a differnet number of coins and a different number of meteors. For example, the first level has 1 coin and 1 meteor, the second has 2 coins/meteors, the third has 5 coins/meteors, and then the fourth and final level has 10 coins and 10 meteors.

One of the many coding challenges which occurred throughout the production and development of this game was utilizing the game engine to create different platform structures and patterns for different levels. As you may notice, the first level has platforms in a random structure, whereas all of the others have a designated design pattern which will always be the same every time the game is run. I utilized a while loop in this case and manipulated the width and height of the following platforms to create a structure which was both challenging for the player but also realistic so that there was a good even change of completing the game.

Another important coding challenge of which spent a considerable amount of time perfecting was the arrows and the meteors, as I didn’t want them to drop randomly in a basic while loop nor did I want them both reliant on a timer. For this I finally decided to drop an arrow every time the user jumps (pressed the UP arrow key) and allowed the meteor to motivate the player to move quickly up the structure and pass all the levels without being pushed down by the meteors.
